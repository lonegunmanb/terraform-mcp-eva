package main

import (
	"context"
	"flag"
	"fmt"
	"log"
	"net/http"
	"os"

	"github.com/modelcontextprotocol/go-sdk/mcp"
	"imagegen-mcp-go/openai_client" // 我们的 OpenAI 客户端
)

var httpAddr = flag.String("http", "", "if set, use streamable HTTP at this address, instead of stdin/stdout")

type imageGenParams struct {
	Prompt    string `json:"prompt"`
	ImageName string `json:"name"`
	Path      string `json:"path"`
}

func main() {
	// 从环境变量加载 OpenAI API 密钥
	apiKey := os.Getenv("OPENAI_API_KEY")
	if apiKey == "" {
		log.Fatal("错误：OPENAI_API_KEY 环境变量未设置。")
	}
	// 初始化服务
	openAIClient := openai_client.New(apiKey)
	server := mcp.NewServer("imagegen-mcp", "v0.1.0", nil)
	server.AddTools(mcp.NewServerTool("generate_image", "生成图像并保存到本地", func(ctx context.Context, session *mcp.ServerSession, c *mcp.CallToolParamsFor[imageGenParams]) (*mcp.CallToolResultFor[any], error) {
		// 从输入参数中获取 prompt
		prompt := c.Arguments.Prompt
		imageName := c.Arguments.ImageName
		path := c.Arguments.Path

		// 调用 OpenAI 客户端生成图像
		// 注意：我们将 model 参数留空，让 GenerateImage 函数使用默认值
		result, err := openAIClient.GenerateImage(prompt, "", path)
		if err != nil {
			// 如果生成图像时出错，返回错误
			return nil, fmt.Errorf("生成图像失败: %w", err)
		}

		// 图像生成成功，返回包含图像路径的结果
		return &mcp.CallToolResultFor[any]{
			Content: []mcp.Content{&mcp.ResourceLink{
				URI:  result.ImageUrl,
				Name: imageName,
			}},
		}, nil
	}, mcp.Input(
		mcp.Property("prompt", mcp.Description("生成图像的提示文本，必填")),
		mcp.Property("name", mcp.Description("图片的名称，必填")),
		mcp.Property("path", mcp.Description("图片保存的文件名，绝对路径, 必填")),
	)))
	if *httpAddr != "" {
		handler := mcp.NewStreamableHTTPHandler(func(*http.Request) *mcp.Server {
			return server
		}, nil)
		log.Printf("MCP handler listening at %s", *httpAddr)
		http.ListenAndServe(*httpAddr, handler)
	} else {
		t := mcp.NewLoggingTransport(mcp.NewStdioTransport(), os.Stderr)
		if err := server.Run(context.Background(), t); err != nil {
			log.Printf("Server failed: %v", err)
		}
	}

}
